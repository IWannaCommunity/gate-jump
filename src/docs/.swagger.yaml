openapi: 3.0.2
info:
  description: "This is a reference for gate-jump's API."
  version: "1.0.0"
  title: "gate-jump"
  termsOfService: "whatever"
  contact: 
    email: "admin@gatejump.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
servers:
- url: https://gate-jump.com/api/v0
tags:
- name: "user"
  description: "User interaction API requests"
  externalDocs:
    description: ""
    url: ""
- name: "scopes"
  description: "scopes stuff"
  externalDocs:
    description: ""
    url: ""
- name: "misc"
  description: "Misc API requests"
  externalDocs:
    description: ""
    url: ""
  
paths:
  /:
    get:
      tags:
      - "misc"
      summary: "Check if the server is up and running"
      description: "Should be used as a check to determine if the authentication service is running."
      operationId: "getAlive"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Alive"

  /user:  
    get:
      tags:
      - "user"
      summary: "Get a list of users from the given id."
      description: "Returns a list of users from the given ID with the specified offset and count at a max of 100 each. For administrators only."
      operationId: "getUsers"
      parameters:
      - name: "offset"
        in: "query"
        description: "Starting number of users to enumerate through."
        required: false
        schema:
          type: integer
          format: uint8
      - name: "count"
        in: "query"
        description: "Max amount of users to be returned."
        required: false
        schema:
          type: integer
          format: uint8
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /register:
    post:
      tags:
      - "user"
      summary: "Register an account to the authentication service."
      description: "This will create an account for the applied authentication service. Depending on the settings of the service, a end-user will be unable to login to their account until they verify themselves by clicking the magic link sent to their email. Parameter input is also validated server-side, so if we find that the email, password, or username is badly formatted or unprocessable in someway we will reject the registration request. \r\n Additionally, we might require a invite code on registration to successfully sign-up."
      operationId: "createUser"
      requestBody:
        description: "Registration Information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegistration"
      responses:
        200:
          description: Success
          content: {}
  /login:
    post:
      tags:
      - "user"
      summary: "Login an account to the website."
      description: "If a correct username and password authorization is given, a usable bearer token and refresh token will be subsequently handed out. The refresh token should be used on the /refresh endpoint to get a new bearer token when the original expires."
      operationId: "validateUser"
      requestBody:
        description: "User Credentials"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Claims"
        401:
          description: Banned or Deleted Account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Blank"
        500:
          description: Invalid Parameters or Database Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Blank"
  /refresh:
    post:
      tags:
      - "user"
      summary: "Retrieves a fresh bearer token for a user."
      description: "The refresh token must be vaild, invalid tokens will refuse to retrieve any new bearer tokens and you will be force to reauthenticate if you do not have any valid tokens."
      operationId: "refreshUser"
      requestBody:
        description: "Refresh Token"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshToken"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessToken"
        401:
          description: "Invalidated Token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Blank"
        500:
          description: "Database Issue"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Blank"
  /user/{id}:
    get:
      tags:
      - "user"
      summary: "Retrieves a user from the given ID."
      description: "Administration Only."
      operationId: "getUser"
      parameters:
      - name: "id"
        in: "path"
        description: "User ID"
        required: true
        schema:
          type: integer
          format: uint64
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: "Invalid Parameter"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Blank"
        404:
          description: "Nonexistant User"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Blank"
        500:
          description: "Database Issue"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Blank"
    put:
      tags:
      - "user"
      summary: "Update the user's information from the given ID."
      description: "Requires that you are either an administrator or the given user."
      operationId: "updateUser"
      requestBody:
        description: "User"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      parameters:
      - name: "id"
        in: "path"
        description: "User ID"
        required: true
        schema:
          type: integer
          format: uint64
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: "Invalid Parameter"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Blank"
        401:
          description: "Not Admin or Self"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Blank"
        500:
          description: "Database Issue"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Blank"
    delete:
      tags:
      - "user"
      summary: "Mark a user as deleted from the given ID."
      description: "This won't actually delete the account, but in the future there will be a function to actually wipe accounts from the database that have been marked as 'delete'. This endpoint requires that you are either the user in question, or an administrator acting on behalf of the user."
      operationId: "deleteUser"
      parameters:
      - name: "id"
        in: "path"
        description: "User ID"
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Blank"
        400:
          description: "Invalid Parameter"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Blank"
        401:
          description: "Not Admin or Self"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Blank"
        500:
          description: "Database Issue"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Blank"
  /user/{name}:
    get:
      tags:
      - "user"
      summary: "Retrieve user by name."
      description: "Volatile, may not return even if the user exists. We recommend using GET /user/{id} under most circumstances."
      operationId: "getUserByName"
      parameters:
      - name: "name"
        in: "path"
        description: "parameter information"
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        404:
          description: "Nonexistant User"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Blank"
        500:
          description: "Database Issue"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Blank"
  /verify/{magic}:
    get:
      tags:
      - "user"
      summary: "Verifies a user's email."
      description: "This verifies that the given email from a user is their's. Under most circumstances this will allow the user to actually login and use their account to access resources."
      operationId: "verifyUser"
      parameters:
      - name: "magic"
        in: "path"
        description: "Magic"
        required: true
        schema:
          type: string
      responses:
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Blank"
        500:
          description: "Generic Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Blank"

  /scope:
    post:
      tags:
      - "scopes"
      summary: "Creates a new scope."
      description: "Scopes are data, more precisely defining how a user can interact with services. Unfinished and incomplete API, check back later!"
      operationId: "createScope"
      responses:
        200:
          description: Success
          content: {}


components:
  schemas:
    Blank:
      type: "object"
      xml:
        name: "Blank"
    Alive:
      type: "object"
      properties:
        alive:
          type: boolean
          example: true
      xml:
        name: "Alive"
    User:
      type: "object"
      properties:
        uuid:
          type: "string"
          format: "uuid"
        name:
          type: "string"
          example: "stinkycheeseone890"
        password:
          type: "string"
          format: "password"
          example: "CorrectHorseBatteryStaple"
        email:
          type: "string"
          format: "email"
          example: "iLOVEcheese@gmail.com"
        country:
          type: "string"
          format: "ISO3166-1-Alpha3"
          example: "USA"
        locale:
          type: "string"
          format: "RFC5646"
          example: "en-US"
        date_created:
          type: "string"
          format: "date-time"
        verified:
          type: "boolean"
          example: true
        banned:
          type: "boolean"
          example: false
        last_login:
          type: "string"
          format: "date-time"
        deleted:
          type: "boolean"
          example: false
        date_deleted:
          type: "string"
          format: "date-time"
    UserRegistration:
      type: "object"
      properties:
        name:
          type: "string"
          example: "stinkycheeseone890"
        password:
          type: "string"
          example: "CorrectHorseBatteryStaple"
        email:
          type: "string"
          example: "iLOVEcheese@gmail.com"
        invite-code:
          type: "string"
          example: "XTLF2-P6MSX-5FGXP"
      xml:
        name: "UserRegistration"
    LoginRequest:
      type: "object"
      properties:
        username:
          type: "string"
        password:
          type: "string"
          format: "password"
      xml:
        name: "LoginRequest"
    Claims:
      type: "object"
      properties:
        bearer:
          type: "string"
          format: "jwt"
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        refresh:
          type: "string"
          format: "jwt"
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIn0.dozjgNryP4J3jVmNHl0w5N_XgL0n3I9PlFUP0THsR8U"
      xml:
        name: "Claims"
    AccessToken:
      type: "object"
      properties:
        bearer:
          type: "string"
          format: "jwt"
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
      xml:
        name: "AccessToken"
    RefreshToken:
      type: "object"
      properties:
        refresh:
          type: "string"
          format: "jwt"
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIn0.dozjgNryP4J3jVmNHl0w5N_XgL0n3I9PlFUP0THsR8U"
      xml:
        name: "RefreshToken"

externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"