openapi: 3.0.2
info:
  description: "This is a reference for gate-jump's API."
  version: "1.0.0"
  title: "gate-jump"
  termsOfService: "whatever"
  contact: 
    email: "admin@gatejump.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
servers:
- url: https://gate-jump.com/api/v0
tags:
- name: "user"
  description: "User interaction API requests"
  externalDocs:
    description: ""
    url: ""
- name: "scopes"
  description: "scopes stuff"
  externalDocs:
    description: ""
    url: ""
- name: "misc"
  description: "Misc API requests"
  externalDocs:
    description: ""
    url: ""
  
paths:
  /:
    get:
      tags:
      - "misc"
      summary: "Check if the server is up and running"
      description: "Should be used as a check to determine if the authentication service is running."
      operationId: "getAlive"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model'
      responses:
        200:
          description: No Description
          content: {}

  /scope:
    post:
      tags:
      - "scopes"
      summary: "Creates a new scope"
      description: "Scopes are data, more precisely defining how a user can interact with services."
      operationId: "createScope"
      parameters:
      - in: "string"
        name: "name"
        description: "Name of the scope"
        required: true
      - in: ""
        name: "description"
      responses:
        200:
          description: No Description
          content: {}
  /user:  
    get:
      tags:
      - "user"
      summary: "Get a list of users from the given id."
      description: "thinking"
      operationId: "getUsers"
      parameters:
      - in: "Authorization"
        name: "Authorization Token"
        description: "Used to confirm the person making the request is an admin of gate-jump."
        required: true
      responses:
        200:
          description: No Description
          content: {}
  /register:
    post:
      tags:
      - "user"
      summary: "Register an account to the website."
      description: "thinking"
      operationId: "createUser"
      parameters:
      - name: "body"
        in: "body"
        description: "The account information."
        schema:
          $ref: "#/components/schemas/CreateData"
        required: true
      responses:
        200:
          description: No Description
          content: {}
  /login:
    post:
      tags:
      - "user"
      summary: "Login an account to the website."
      description: "thinking"
      operationId: "validateUser"
      parameters:
      - name: "body"
        in: "body"
        description: "The account information."
        schema:
          $ref: "#/components/schemas/Model"
      responses:
        200:
          description: No Description
          content: {}
  /refresh:
    post:
      tags:
      - "user"
      summary: "Retrieves a fresh bearer token for a user."
      description: "body inside click"
      operationId: "refreshUser"
      parameters:
      - name: "body"
        in: "body"
        description: "parameter information"
        schema:
          $ref: "#/components/schemas/Model"
      responses:
        200:
          description: No Description
          content: {}
  /user/{id:[0-9]+}:
    get:
      tags:
      - "user"
      summary: "next to api thingy"
      description: "body inside click"
      operationId: "function name"
      parameters:
      - name: "body"
        in: "body"
        description: "parameter information"
        schema:
          $ref: "#/components/schemas/Model"
      responses:
        200:
          description: No Description
          content: {}
    put:
      tags:
      - "user"
      summary: "next to api thingy"
      description: "body inside click"
      operationId: "function name"
      parameters:
      - name: "body"
        in: "body"
        description: "parameter information"
        schema:
          $ref: "#/components/schemas/Model"
      responses:
        200:
          description: No Description
          content: {}
    delete:
      tags:
      - "user"
      summary: "next to api thingy"
      description: "body inside click"
      operationId: "function name"
      parameters:
      - name: "body"
        in: "body"
        description: "parameter information"
        schema:
          $ref: "#/components/schemas/Model"
      responses:
        200:
          description: No Description
          content: {}
    post:
      tags:
      - "user"
      summary: "next to api thingy"
      description: "body inside click"
      operationId: "function name"
      parameters:
      - name: "body"
        in: "body"
        description: "parameter information"
        schema:
          $ref: "#/components/schemas/Model"
      responses:
        200:
          description: No Description
          content: {}
  /user/{name}:
    get:
      tags:
      - "user"
      summary: "next to api thingy"
      description: "body inside click"
      operationId: "function name"
      parameters:
      - name: "body"
        in: "body"
        description: "parameter information"
        schema:
          $ref: "#/components/schemas/Model"
      responses:
        200:
          description: No Description
          content: {}
  /verify/{magic}:
    get:
      tags:
      - "user"
      summary: "next to api thingy"
      description: "body inside click"
      operationId: "function name"
      responses:
        200:
          description: No Description
          content: {}

components:
  schemas:
    Model:
      type: "object"
      xml:
        name: "Model"
    CreateData:
      type: "object"
      properties:
        name:
          type: "string"
          example: "stinkycheeseone890"
        password:
          type: "string"
          example: "CorrectHorseBatteryStaple"
        email:
          type: "string"
          example: "iLOVEcheese@gmail.com"
      xml:
        name: "UserCreateData"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"