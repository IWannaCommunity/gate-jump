// Code generated by fileb0x at "2019-03-02 19:41:47.5936514 -0500 EST m=+0.005983901" from config file "fileb0x.toml" DO NOT EDIT.
// modification hash(7495d86c04a268591d4c30654afe2c14.6045c105fcd4a476680e073e66a4ab8c)

package migrations


import (
  "bytes"
  
  "context"
  "io"
  "net/http"
  "os"
  "path"


  "golang.org/x/net/webdav"


)

var ( 
  // CTX is a context for webdav vfs
  CTX = context.Background()

  
  // FS is a virtual memory file system
  FS = webdav.NewMemFS()
  

  // Handler is used to server files through a http handler
  Handler *webdav.Handler

  // HTTP is the http file system
  HTTP http.FileSystem = new(HTTPFS)
)

// HTTPFS implements http.FileSystem
type HTTPFS struct {
	// Prefix allows to limit the path of all requests. F.e. a prefix "css" would allow only calls to /css/*
	Prefix string
}



// File00001InitalSQL is "00001_inital.sql"
var File00001InitalSQL = []byte("\x43\x52\x45\x41\x54\x45\x20\x54\x41\x42\x4c\x45\x20\x75\x73\x65\x72\x73\x20\x28\x0d\x0a\x20\x20\x20\x20\x69\x64\x20\x49\x4e\x54\x20\x4e\x4f\x54\x20\x4e\x55\x4c\x4c\x20\x41\x55\x54\x4f\x5f\x49\x4e\x43\x52\x45\x4d\x45\x4e\x54\x2c\x0d\x0a\x20\x20\x20\x20\x6e\x61\x6d\x65\x20\x56\x41\x52\x43\x48\x41\x52\x28\x31\x30\x30\x29\x20\x43\x48\x41\x52\x41\x43\x54\x45\x52\x20\x53\x45\x54\x20\x75\x74\x66\x38\x20\x43\x4f\x4c\x4c\x41\x54\x45\x20\x75\x74\x66\x38\x5f\x75\x6e\x69\x63\x6f\x64\x65\x5f\x63\x69\x20\x4e\x4f\x54\x20\x4e\x55\x4c\x4c\x2c\x0d\x0a\x20\x20\x20\x20\x70\x61\x73\x73\x77\x6f\x72\x64\x20\x43\x48\x41\x52\x28\x36\x30\x29\x20\x42\x49\x4e\x41\x52\x59\x20\x4e\x4f\x54\x20\x4e\x55\x4c\x4c\x2c\x0d\x0a\x20\x20\x20\x20\x65\x6d\x61\x69\x6c\x20\x56\x41\x52\x43\x48\x41\x52\x28\x31\x30\x30\x29\x2c\x0d\x0a\x20\x20\x20\x20\x63\x6f\x75\x6e\x74\x72\x79\x20\x43\x48\x41\x52\x28\x32\x29\x2c\x0d\x0a\x20\x20\x20\x20\x6c\x6f\x63\x61\x6c\x65\x20\x56\x41\x52\x43\x48\x41\x52\x28\x32\x30\x29\x2c\x0d\x0a\x20\x20\x20\x20\x64\x61\x74\x65\x5f\x63\x72\x65\x61\x74\x65\x64\x20\x44\x41\x54\x45\x54\x49\x4d\x45\x20\x4e\x4f\x54\x20\x4e\x55\x4c\x4c\x20\x44\x45\x46\x41\x55\x4c\x54\x20\x43\x55\x52\x52\x45\x4e\x54\x5f\x54\x49\x4d\x45\x53\x54\x41\x4d\x50\x2c\x0d\x0a\x20\x20\x20\x20\x61\x64\x6d\x69\x6e\x20\x42\x4f\x4f\x4c\x20\x4e\x4f\x54\x20\x4e\x55\x4c\x4c\x20\x44\x45\x46\x41\x55\x4c\x54\x20\x46\x41\x4c\x53\x45\x2c\x0d\x0a\x20\x20\x20\x20\x76\x65\x72\x69\x66\x69\x65\x64\x20\x42\x4f\x4f\x4c\x20\x4e\x4f\x54\x20\x4e\x55\x4c\x4c\x20\x44\x45\x46\x41\x55\x4c\x54\x20\x46\x41\x4c\x53\x45\x2c\x0d\x0a\x20\x20\x20\x20\x62\x61\x6e\x6e\x65\x64\x20\x42\x4f\x4f\x4c\x20\x4e\x4f\x54\x20\x4e\x55\x4c\x4c\x20\x44\x45\x46\x41\x55\x4c\x54\x20\x46\x41\x4c\x53\x45\x2c\x0d\x0a\x20\x20\x20\x20\x6c\x61\x73\x74\x5f\x74\x6f\x6b\x65\x6e\x20\x42\x4c\x4f\x42\x2c\x0d\x0a\x20\x20\x20\x20\x6c\x61\x73\x74\x5f\x6c\x6f\x67\x69\x6e\x20\x44\x41\x54\x45\x54\x49\x4d\x45\x2c\x0d\x0a\x20\x20\x20\x20\x6c\x61\x73\x74\x5f\x69\x70\x20\x56\x41\x52\x43\x48\x41\x52\x28\x35\x30\x29\x2c\x0d\x0a\x20\x20\x20\x20\x64\x65\x6c\x65\x74\x65\x64\x20\x42\x4f\x4f\x4c\x20\x4e\x4f\x54\x20\x4e\x55\x4c\x4c\x20\x44\x45\x46\x41\x55\x4c\x54\x20\x46\x41\x4c\x53\x45\x2c\x0d\x0a\x20\x20\x20\x20\x64\x61\x74\x65\x5f\x64\x65\x6c\x65\x74\x65\x64\x20\x44\x41\x54\x45\x54\x49\x4d\x45\x2c\x0d\x0a\x20\x20\x20\x20\x50\x52\x49\x4d\x41\x52\x59\x20\x4b\x45\x59\x20\x28\x69\x64\x29\x0d\x0a\x29\x3b\x0d\x0a")

// File00002MetaSQL is "00002_meta.sql"
var File00002MetaSQL = []byte("\x43\x52\x45\x41\x54\x45\x20\x54\x41\x42\x4c\x45\x20\x6d\x65\x74\x61\x20\x28\x0d\x0a\x20\x20\x20\x20\x64\x62\x5f\x76\x65\x72\x73\x69\x6f\x6e\x20\x54\x49\x4e\x59\x49\x4e\x54\x20\x55\x4e\x53\x49\x47\x4e\x45\x44\x20\x4e\x4f\x54\x20\x4e\x55\x4c\x4c\x20\x44\x45\x46\x41\x55\x4c\x54\x20\x30\x0d\x0a\x29\x3b\x0d\x0a")

// File00003MagiclinksSQL is "00003_magiclinks.sql"
var File00003MagiclinksSQL = []byte("\x43\x52\x45\x41\x54\x45\x20\x54\x41\x42\x4c\x45\x20\x6d\x61\x67\x69\x63\x20\x28\x0d\x0a\x20\x20\x20\x20\x69\x64\x20\x49\x4e\x54\x20\x4e\x4f\x54\x20\x4e\x55\x4c\x4c\x20\x41\x55\x54\x4f\x5f\x49\x4e\x43\x52\x45\x4d\x45\x4e\x54\x2c\x0d\x0a\x20\x20\x20\x20\x75\x73\x65\x72\x69\x64\x20\x49\x4e\x54\x20\x4e\x4f\x54\x20\x4e\x55\x4c\x4c\x2c\x0d\x0a\x20\x20\x20\x20\x6d\x61\x67\x69\x63\x20\x54\x45\x58\x54\x20\x4e\x4f\x54\x20\x4e\x55\x4c\x4c\x2c\x0d\x0a\x20\x20\x20\x20\x50\x52\x49\x4d\x41\x52\x59\x20\x4b\x45\x59\x20\x28\x69\x64\x29\x2c\x0d\x0a\x20\x20\x20\x20\x46\x4f\x52\x45\x49\x47\x4e\x20\x4b\x45\x59\x20\x28\x75\x73\x65\x72\x69\x64\x29\x20\x52\x45\x46\x45\x52\x45\x4e\x43\x45\x53\x20\x75\x73\x65\x72\x73\x28\x69\x64\x29\x0d\x0a\x29\x0d\x0a")

// File00004UUIDSQL is "00004_uuid.sql"
var File00004UUIDSQL = []byte("\x41\x4c\x54\x45\x52\x20\x54\x41\x42\x4c\x45\x20\x60\x75\x73\x65\x72\x73\x60\x0d\x0a\x20\x20\x20\x20\x41\x44\x44\x20\x75\x75\x69\x64\x20\x76\x61\x72\x63\x68\x61\x72\x28\x32\x35\x35\x29\x20\x4e\x4f\x54\x20\x4e\x55\x4c\x4c\x20\x44\x45\x46\x41\x55\x4c\x54\x20\x55\x55\x49\x44\x28\x29\x3b\x0d\x0a")

// File00005ScopesSQL is "00005_scopes.sql"
var File00005ScopesSQL = []byte("\x43\x52\x45\x41\x54\x45\x20\x54\x41\x42\x4c\x45\x20\x73\x63\x6f\x70\x65\x73\x20\x28\x0d\x0a\x20\x20\x20\x20\x69\x64\x20\x49\x4e\x54\x20\x4e\x4f\x54\x20\x4e\x55\x4c\x4c\x20\x41\x55\x54\x4f\x5f\x49\x4e\x43\x52\x45\x4d\x45\x4e\x54\x2c\x0d\x0a\x20\x20\x20\x20\x6e\x61\x6d\x65\x20\x56\x41\x52\x43\x48\x41\x52\x28\x32\x35\x35\x29\x20\x4e\x4f\x54\x20\x4e\x55\x4c\x4c\x2c\x0d\x0a\x20\x20\x20\x20\x64\x65\x73\x63\x72\x69\x70\x74\x69\x6f\x6e\x20\x54\x45\x58\x54\x20\x4e\x4f\x54\x20\x4e\x55\x4c\x4c\x2c\x0d\x0a\x20\x20\x20\x20\x50\x52\x49\x4d\x41\x52\x59\x20\x4b\x45\x59\x20\x28\x69\x64\x29\x0d\x0a\x29\x0d\x0a")



func init() {
  err := CTX.Err()
  if err != nil {
		panic(err)
	}









  
  var f webdav.File
  

  

  
  

  f, err = FS.OpenFile(CTX, "00001_inital.sql", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
  if err != nil {
    panic(err)
  }

  
  _, err = f.Write(File00001InitalSQL)
  if err != nil {
    panic(err)
  }
  

  err = f.Close()
  if err != nil {
    panic(err)
  }
  
  

  f, err = FS.OpenFile(CTX, "00002_meta.sql", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
  if err != nil {
    panic(err)
  }

  
  _, err = f.Write(File00002MetaSQL)
  if err != nil {
    panic(err)
  }
  

  err = f.Close()
  if err != nil {
    panic(err)
  }
  
  

  f, err = FS.OpenFile(CTX, "00003_magiclinks.sql", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
  if err != nil {
    panic(err)
  }

  
  _, err = f.Write(File00003MagiclinksSQL)
  if err != nil {
    panic(err)
  }
  

  err = f.Close()
  if err != nil {
    panic(err)
  }
  
  

  f, err = FS.OpenFile(CTX, "00004_uuid.sql", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
  if err != nil {
    panic(err)
  }

  
  _, err = f.Write(File00004UUIDSQL)
  if err != nil {
    panic(err)
  }
  

  err = f.Close()
  if err != nil {
    panic(err)
  }
  
  

  f, err = FS.OpenFile(CTX, "00005_scopes.sql", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
  if err != nil {
    panic(err)
  }

  
  _, err = f.Write(File00005ScopesSQL)
  if err != nil {
    panic(err)
  }
  

  err = f.Close()
  if err != nil {
    panic(err)
  }
  


  Handler = &webdav.Handler{
    FileSystem: FS,
    LockSystem: webdav.NewMemLS(),
  }


}



// Open a file
func (hfs *HTTPFS) Open(path string) (http.File, error) {
  path = hfs.Prefix + path


  f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
  if err != nil {
    return nil, err
  }

  return f, nil
}

// ReadFile is adapTed from ioutil
func ReadFile(path string) ([]byte, error) {
  f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
  if err != nil {
    return nil, err
  }

  buf := bytes.NewBuffer(make([]byte, 0, bytes.MinRead))

  // If the buffer overflows, we will get bytes.ErrTooLarge.
  // Return that as an error. Any other panic remains.
  defer func() {
    e := recover()
    if e == nil {
      return
    }
    if panicErr, ok := e.(error); ok && panicErr == bytes.ErrTooLarge {
      err = panicErr
    } else {
      panic(e)
    }
  }()
  _, err = buf.ReadFrom(f)
  return buf.Bytes(), err
}

// WriteFile is adapTed from ioutil
func WriteFile(filename string, data []byte, perm os.FileMode) error {
  f, err := FS.OpenFile(CTX, filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, perm)
  if err != nil {
    return err
  }
  n, err := f.Write(data)
  if err == nil && n < len(data) {
    err = io.ErrShortWrite
  }
  if err1 := f.Close(); err == nil {
    err = err1
  }
  return err
}

// WalkDirs looks for files in the given dir and returns a list of files in it
// usage for all files in the b0x: WalkDirs("", false)
func WalkDirs(name string, includeDirsInList bool, files ...string) ([]string, error) {
	f, err := FS.OpenFile(CTX, name, os.O_RDONLY, 0)
	if err != nil {
		return nil, err
	}

	fileInfos, err := f.Readdir(0)
	if err != nil {
    return nil, err
  }
  
  err = f.Close()
  if err != nil {
		return nil, err
	}

	for _, info := range fileInfos {
		filename := path.Join(name, info.Name())

		if includeDirsInList || !info.IsDir() {
			files = append(files, filename)
		}

		if info.IsDir() {
			files, err = WalkDirs(filename, includeDirsInList, files...)
			if err != nil {
				return nil, err
			}
		}
	}

	return files, nil
}


